######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT. See docs/Slicers.md for more information on using these macros.

[gcode_macro START_PRINT]
gcode:
    RGB_BLINK_W AMOUNT=3
    # Home the printer and Auto level the bed
    G28
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Use absolute coordinates
    G90
    # Reset Extruder
    G92 E0
    # Move the nozzle near the bed / Move Z Axis up a bit during heating to not damage bed
    G1 Z10 F3000
    # Start bed heating
    M300 P1 S4000
    M117 Starting to heat the bed!
    SET_LED_TEMPLATE LED=RGB INDEX=1 TEMPLATE=show_bed
    M140 S{BED_TEMP}
    # Reset the G-Code Z offset (adjust Z offset if needed)
    #SET_GCODE_OFFSET Z=10.0
    # Move the nozzle very close to the bed
    #G1 Z0.15 F300
    # Wait for bed to reach temperature
    M117 Waiting for the bed to heat!
    M300 P1 S4000
    M190 S{BED_TEMP}
    #BED_MESH_CALIBRATE with ADAPTIVE=1 for KAMP
    G29
    # Set and wait for nozzle to reach temperature
    M117 Waiting for the extruder to heat!
    M300 P1 S4000
    SET_LED_TEMPLATE LED=RGB INDEX=1 TEMPLATE=show_heat
    wled_off
    M109 S{EXTRUDER_TEMP}
    # Move to start position
    G1 X0.1 Y20 Z0.3 F5000.0
    # Draw the first line
    M117 Draw the first line!
    G1 X0.1 Y200.0 Z0.3 F1500.0 E15
    # Move to side a little
    M117 Moving away!
    G1 X1 Y200.0 Z0.3 F5000.0
    # Draw the second line
    M117 Draw the second line!
    G1 X1 Y20 Z0.3 F1500.0 E30
    # Reset Extruder
    G92 E0
    # Move Z Axis up little to prevent scratching of Heat Bed
    G1 Z2.0 F3000
    # Move over to prevent blob squish
    G1 X5 Y20 Z0.3 F5000.0
    M300 P2
    SET_LED_TEMPLATE LED=RGB INDEX=1 TEMPLATE=show_print
    M117 Ready to print!
    # End of custom start GCode

[gcode_macro END_PRINT]
gcode:
    # Relative positioning
    G91
    # Move nozzle away from print while retracting
    # Retract a bit
    G1 E-2 F270
    # Retract and raise Z
    G1 E-2 Z0.2 F2400
    # Wipe out
    G1 X5 Y5 F3000
    # Raise Z more
    G1 Z10
    # Absolute positioning
    G90
    # Present print
    #G1 X0 Y{machine_depth}
    G1 X0 Y235 F3000
    # Turn off bed, extruder, and fan
    M106 S0
    M104 S0
    M140 S0
    # Disable all steppers but Z
    M84 X Y E
    M300 P1
    M117 All done!
    SET_LED_TEMPLATE LED=RGB INDEX=1 TEMPLATE=show_done
    wled_fireworks
    # End of custom start GCode


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    SET_LED_TEMPLATE LED=RGB INDEX=1 TEMPLATE=show_off
    ##### get user parameters or use default #####
    {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
    {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
    {% set retract = client.cancel_retract|default(5.0)|abs %}
    ##### define park position #####
    {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
              else "X=" ~ client.park_at_cancel_x %}
    {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
              else "Y=" ~ client.park_at_cancel_y %}
    {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
    ##### end of definitions #####
    # restore idle_timeout time if needed
    {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
      SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
    {% endif %}
    {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
    _CLIENT_RETRACT LENGTH={retract}
    TURN_OFF_HEATERS
    M106 S0
    {client.user_cancel_macro|default("")}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    # clear pause_next_layer and pause_at_layer as preparation for next print
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
    CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    SET_LED_TEMPLATE LED=RGB INDEX=1 TEMPLATE=show_pause
    ##### get user parameters or use default ##### 
    {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
    {% set idle_timeout = client.idle_timeout|default(0) %}
    {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
    {% set restore = False if printer.toolhead.extruder == ''
                else True  if params.RESTORE|default(1)|int == 1 else False %}
    ##### end of definitions #####
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
    # set a new idle_timeout value
    {% if idle_timeout > 0 %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
      SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
    {% endif %}
    PAUSE_BASE
    {client.user_pause_macro|default("")}
    _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
    SET_LED_TEMPLATE LED=RGB INDEX=1 TEMPLATE=show_print
    ##### get user parameters or use default #####
    {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
    {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
    {% set sp_move = client.speed_move|default(velocity) %}
    {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                      else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                      else printer[client.runout_sensor].filament_detected %} # sensor status
    {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                    else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
    {% set do_resume = False %}
    {% set prompt_txt = [] %}
    ##### end of definitions #####
    #### Printer comming from timeout idle state ####
    {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
      {% if last_extruder_temp.restore %}
        # we need to use the unicode (\u00B0) for the Â° as py2 env's would throw an error otherwise 
        RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
        M109 S{last_extruder_temp.temp}
        {% set do_resume = True %}
      {% elif can_extrude %}
        {% set do_resume = True %}
      {% else %} 
        RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
        {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
      {% endif %}
    #### Printer comming out of regular PAUSE state ####
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %}
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
    {% if runout_resume %}
      {% if do_resume %}
        {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
        {client.user_resume_macro|default("")}
        _CLIENT_EXTRUDE
        RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
      {% endif %}
    {% else %}
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
      {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
    {% endif %}
    ##### Generate User Information box in case of abort #####
    {% if not (runout_resume and do_resume) %} 
      RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
      {% for element in prompt_txt %}
        RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
      {% endfor %}
      RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
      RESPOND TYPE=command MSG="action:prompt_show"
    {% endif %}
  